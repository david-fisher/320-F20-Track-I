CREATE TABLE students(
	STUDENT INTEGER NOT NULL,
	Name VARCHAR(70) NOT NULL,
	PRIMARY KEY(STUDENT)
);

CREATE TABLE professors(
	PROFESSOR INTEGER NOT NULL,
	NAME VARCHAR(70) NOT NULL,
	PRIMARY KEY(PROFESSOR)
);

CREATE TABLE courses(
	COURSE INTEGER NOT NULL,
	NAME VARCHAR(70) NOT NULL,
	PRIMARY KEY(COURSE)
);

CREATE TABLE scenarios(
	SCENARIO			INTEGER		NOT NULL,
	VERSION		INTEGER		NOT NULL,
	NAME			VARCHAR(70),
	NUM_CONVERSATION	INTEGER,
	PUBLIC			BOOLEAN,
	PROFESSOR		INTEGER REFERENCES professors(PROFESSOR),
	DATE_CREATED	DATE,
	IS_FINISHED		BOOLEAN,
	PRIMARY KEY(SCENARIO, VERSION)		
);

CREATE TABLE pages(
	PAGE		 INTEGER		NOT NULL,
	PAGE_TYPE	 VARCHAR(70),
	PAGE_TITLE	 VARCHAR(70),
	Scenario	 INTEGER,
	Version      INTEGER,
	X_COORDINATE INTEGER,
	Y_COORDINATE INTEGER,
	NEXT_PAGE    INTEGER		REFERENCES pages(PAGE),
	PRIMARY KEY(PAGE),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);

CREATE TABLE stakeholders(
	STAKEHOLDER		INTEGER		NOT NULL,
	NAME		VARCHAR(70)	NOT NULL,
	DESCRIPTION		TEXT,
	JOB			VARCHAR(70),
	Scenario	INTEGER,
	Version     INTEGER,
	INTRODUCTION TEXT,
	PRIMARY KEY(STAKEHOLDER),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);

CREATE TABLE responses(
	STUDENT		INTEGER REFERENCES students(STUDENT),
	Scenario	INTEGER,
	Version		INTEGER,
	COURSE		INTEGER REFERENCES courses(COURSE),
	DATE_TAKEN	DATE NOT NULL,
	PRIMARY KEY(STUDENT, COURSE, Scenario, Version, DATE_TAKEN),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);

CREATE TABLE issues(
	ISSUE INTEGER UNIQUE,
	Scenario	INTEGER,
	Version		INTEGER,
	Name		VARCHAR(70),
	IMPORTANCE_SCORE DECIMAL,
	PRIMARY KEY (ISSUE, Scenario, Version),
	FOREIGN KEY (Scenario, Version) REFERENCES scenarios(SCENARIO, VERSION)
);

CREATE TABLE coverage(
	ISSUE INTEGER references issues(ISSUE),
	STAKEHOLDER INTEGER REFERENCES stakeholders(STAKEHOLDER),
	coverage_score	DECIMAL,
	PRIMARY KEY (ISSUE, STAKEHOLDER)
);

CREATE TABLE assigned_to(
	Student		INTEGER REFERENCES students(STUDENT),
	Scenario	INTEGER,
	Version INTEGER,
	PRIMARY KEY(Student, Scenario, Version),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);

CREATE TABLE students_in(
	STUDENT INTEGER REFERENCES students(STUDENT),
	COURSE INTEGER REFERENCES courses(COURSE),
	PRIMARY KEY(STUDENT,COURSE)
);

CREATE TABLE Professors_teach(
	PROFESSOR INTEGER REFERENCES professors(PROFESSOR),
	COURSE INTEGER REFERENCES courses(COURSE),
	PRIMARY KEY(PROFESSOR,COURSE)
);

CREATE TABLE demographics(
	STUDENT INTEGER REFERENCES students(STUDENT),
	AGE INTEGER,
	GRADE VARCHAR(3),
	GENDER VARCHAR(10),
	RACE VARCHAR(10),
	MAJOR VARCHAR(70),
	PRIMARY KEY(STUDENT)
);

CREATE TABLE reflections_taken(
	REFLECTIONS TEXT,
	STUDENT		INTEGER,
	COURSE		INTEGER,
	Scenario	INTEGER,
	Version INTEGER,
	DATE_TAKEN	DATE,
	REFLECTION_PAGE INTEGER, 
	PRIMARY KEY(REFLECTIONS, STUDENT, COURSE, Scenario, Version, DATE_TAKEN),
	FOREIGN KEY (STUDENT, Scenario, Version, COURSE, DATE_TAKEN) references responses(STUDENT, Scenario, Version, COURSE, DATE_TAKEN),
	FOREIGN KEY(REFLECTION_PAGE) references pages(PAGE)
);

CREATE TABLE conversations(
	STAKEHOLDER INTEGER REFERENCES stakeholders(STAKEHOLDER),
	CONVERSATION INTEGER UNIQUE,
	QUESTION TEXT,
	RESPONSE TEXT,
	PRIMARY KEY(STAKEHOLDER, CONVERSATION)
);

CREATE TABLE conversations_had(
	STUDENT		INTEGER,
	COURSE		INTEGER,
	Scenario	INTEGER,
	Version INTEGER,
	DATE_TAKEN	DATE,
	STAKEHOLDER INTEGER REFERENCES stakeholders(STAKEHOLDER),
	SCORE INTEGER,
	CONVERSATION INTEGER REFERENCES conversations(CONVERSATION),
	PRIMARY KEY(STUDENT,COURSE,Scenario, Version, DATE_TAKEN,STAKEHOLDER,CONVERSATION),
	FOREIGN KEY (STUDENT, COURSE, Scenario, Version, DATE_TAKEN) references responses(STUDENT,COURSE, Scenario, Version, DATE_TAKEN)
);

CREATE TABLE action_page(
	PAGE		INTEGER		REFERENCES pages(PAGE),
	CHOICE		TEXT,
	RESULT_PAGE INTEGER,
	PRIMARY KEY(PAGE, CHOICE)
);

CREATE TABLE actions_taken(
	STUDENT		INTEGER,
	Scenario	INTEGER,
	Version		INTEGER,
	COURSE		INTEGER,
	DATE_TAKEN	DATE NOT NULL,
	ACTION_PAGE	INTEGER,
	CHOICE		TEXT,
	FOREIGN KEY (ACTION_PAGE, CHOICE) references(PAGE, CHOICE),
	FOREIGN KEY (STUDENT, Scenario, Version, COURSE, DATE_TAKEN) references responses(STUDENT, Scenario, Version, COURSE, DATE_TAKEN),
	PRIMARY KEY (STUDENT, Scenario, Version, COURSE, DATE_TAKEN, ACTION_PAGE, CHOICE)
);

CREATE TABLE reflection_questions(
	PAGE				INTEGER		REFERENCES pages(PAGE),
	REFLECTION_QUESTION		TEXT,
	PRIMARY KEY(PAGE,REFLECTION_QUESTION)
);

CREATE TABLE generic_page(
	PAGE		INTEGER		REFERENCES pages(PAGE),
	BODY		TEXT,
	PRIMARY KEY(PAGE, BODY)
);

CREATE TABLE stakeholder_page(
	PAGE INTEGER REFERENCES pages(PAGE),
	STAKEHOLDER INTEGER REFERENCES stakeholders(STAKEHOLDER),
	PRIMARY KEY (PAGE, STAKEHOLDER)
);

CREATE TABLE scenarios_for(
	Scenario	 INTEGER,
	Version	 INTEGER,
	COURSE		 INTEGER REFERENCES courses(COURSE),
	PRIMARY KEY(Scenario, Version, COURSE),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);

CREATE TABLE student_times(
	STUDENT		INTEGER,
	COURSE		INTEGER,
	Scenario	INTEGER,
	Version INTEGER,
	DATE_TAKEN	DATE,
	PAGE INTEGER REFERENCES pages(PAGE),
	StartTime	DATE,
	EndTime		DATE,
	PRIMARY KEY (STUDENT, COURSE, Scenario, Version, DATE_TAKEN, PAGE),
	FOREIGN KEY (STUDENT, Scenario, Version, COURSE, DATE_TAKEN) references responses(STUDENT, Scenario, Version, COURSE, DATE_TAKEN)
);

/*
CREATE TABLE stakeholders_in(
	STAKEHOLDER 	INTEGER REFERENCES stakeholders(STAKEHOLDER),
	Scenario		INTEGER,
	Version		INTEGER,
	PRIMARY KEY(STAKEHOLDER,Scenario, Version),
	FOREIGN KEY (Scenario, Version) references scenarios(SCENARIO, VERSION)
);
*/

